{"name": "test_validCredentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF7BAA1B5D2+29090]\n\t(No symbol) [0x00007FF7BA98E689]\n\t(No symbol) [0x00007FF7BA84AFF9]\n\t(No symbol) [0x00007FF7BA8907A8]\n\t(No symbol) [0x00007FF7BA891B11]\n\tGetHandleVerifier [0x00007FF7BAD38C5D+3295277]\n\tGetHandleVerifier [0x00007FF7BAD84843+3605523]\n\tGetHandleVerifier [0x00007FF7BAD7A707+3564247]\n\tGetHandleVerifier [0x00007FF7BAAD6EB6+797318]\n\t(No symbol) [0x00007FF7BA99980F]\n\t(No symbol) [0x00007FF7BA9953F4]\n\t(No symbol) [0x00007FF7BA995580]\n\t(No symbol) [0x00007FF7BA984A1F]\n\tBaseThreadInitThunk [0x00007FF8F078257D+29]\n\tRtlUserThreadStart [0x00007FF8F1B8AF28+40]", "trace": "@pytest.fixture()\n    def test_setUp():\n        global  driver\n        driver = webdriver.Chrome()\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        driver.maximize_window()\n        driver.implicitly_wait(30)\n        yield\n>       driver.close()\n\noperations\\test_login_Example.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:465: in close\n    self.execute(Command.CLOSE)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022C08B18A10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...07FF7BA984A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8F078257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8F1B8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7BAA1B5D2+29090]\nE       \t(No symbol) [0x00007FF7BA98E689]\nE       \t(No symbol) [0x00007FF7BA84AFF9]\nE       \t(No symbol) [0x00007FF7BA8907A8]\nE       \t(No symbol) [0x00007FF7BA891B11]\nE       \tGetHandleVerifier [0x00007FF7BAD38C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF7BAD84843+3605523]\nE       \tGetHandleVerifier [0x00007FF7BAD7A707+3564247]\nE       \tGetHandleVerifier [0x00007FF7BAAD6EB6+797318]\nE       \t(No symbol) [0x00007FF7BA99980F]\nE       \t(No symbol) [0x00007FF7BA9953F4]\nE       \t(No symbol) [0x00007FF7BA995580]\nE       \t(No symbol) [0x00007FF7BA984A1F]\nE       \tBaseThreadInitThunk [0x00007FF8F078257D+29]\nE       \tRtlUserThreadStart [0x00007FF8F1B8AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "description": "OrangeHRM valid credential", "start": 1725452639770, "stop": 1725452644032, "uuid": "61e5d6c0-c9ca-4816-8770-4fd6612bbc45", "historyId": "cefcc51fae3311e79030ae0adfc4e717", "testCaseId": "cefcc51fae3311e79030ae0adfc4e717", "fullName": "operations.test_login_Example#test_validCredentials", "labels": [{"name": "severity", "value": "Critical"}, {"name": "parentSuite", "value": "operations"}, {"name": "suite", "value": "test_login_Example"}, {"name": "host", "value": "LAPTOP-99AIK17I"}, {"name": "thread", "value": "18052-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "operations.test_login_Example"}]}